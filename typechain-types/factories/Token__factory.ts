/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Token, TokenInterface } from "../Token";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_initialSupply",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "remaining",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620019cd380380620019cd8339818101604052810190620000379190620002dd565b83600290805190602001906200004f92919062000181565b5082600390805190602001906200006892919062000181565b5081600481905550816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600560006101000a81548160ff021916908360ff16021790555033600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516200016f91906200039e565b60405180910390a3505050506200058a565b8280546200018f9062000467565b90600052602060002090601f016020900481019282620001b35760008555620001ff565b82601f10620001ce57805160ff1916838001178555620001ff565b82800160010185558215620001ff579182015b82811115620001fe578251825591602001919060010190620001e1565b5b5090506200020e919062000212565b5090565b5b808211156200022d57600081600090555060010162000213565b5090565b6000620002486200024284620003e4565b620003bb565b90508281526020810184848401111562000267576200026662000536565b5b6200027484828562000431565b509392505050565b600082601f83011262000294576200029362000531565b5b8151620002a684826020860162000231565b91505092915050565b600081519050620002c08162000556565b92915050565b600081519050620002d78162000570565b92915050565b60008060008060808587031215620002fa57620002f962000540565b5b600085015167ffffffffffffffff8111156200031b576200031a6200053b565b5b62000329878288016200027c565b945050602085015167ffffffffffffffff8111156200034d576200034c6200053b565b5b6200035b878288016200027c565b93505060406200036e87828801620002af565b92505060606200038187828801620002c6565b91505092959194509250565b62000398816200041a565b82525050565b6000602082019050620003b560008301846200038d565b92915050565b6000620003c7620003da565b9050620003d582826200049d565b919050565b6000604051905090565b600067ffffffffffffffff82111562000402576200040162000502565b5b6200040d8262000545565b9050602081019050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156200045157808201518184015260208101905062000434565b8381111562000461576000848401525b50505050565b600060028204905060018216806200048057607f821691505b60208210811415620004975762000496620004d3565b5b50919050565b620004a88262000545565b810181811067ffffffffffffffff82111715620004ca57620004c962000502565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b62000561816200041a565b81146200056d57600080fd5b50565b6200057b8162000424565b81146200058757600080fd5b50565b611433806200059a6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806355b6ed5c1161008c57806395d89b411161006657806395d89b41146102875780639dc29fac146102a5578063a9059cbb146102d5578063dd62ed3e14610305576100ea565b806355b6ed5c1461020957806370a08231146102395780638da5cb5b14610269576100ea565b806323b872dd116100c857806323b872dd1461015b57806327e235e31461018b578063313ce567146101bb57806340c10f19146101d9576100ea565b806306fdde03146100ef578063095ea7b31461010d57806318160ddd1461013d575b600080fd5b6100f7610335565b60405161010491906110c8565b60405180910390f35b61012760048036038101906101229190610f74565b6103c7565b60405161013491906110ad565b60405180910390f35b6101456104b9565b604051610152919061114a565b60405180910390f35b61017560048036038101906101709190610f21565b6104c3565b60405161018291906110ad565b60405180910390f35b6101a560048036038101906101a09190610eb4565b6107b2565b6040516101b2919061114a565b60405180910390f35b6101c36107ca565b6040516101d09190611165565b60405180910390f35b6101f360048036038101906101ee9190610f74565b6107e1565b60405161020091906110ad565b60405180910390f35b610223600480360381019061021e9190610ee1565b610951565b604051610230919061114a565b60405180910390f35b610253600480360381019061024e9190610eb4565b610976565b604051610260919061114a565b60405180910390f35b6102716109be565b60405161027e9190611092565b60405180910390f35b61028f6109e4565b60405161029c91906110c8565b60405180910390f35b6102bf60048036038101906102ba9190610f74565b610a76565b6040516102cc91906110ad565b60405180910390f35b6102ef60048036038101906102ea9190610f74565b610c67565b6040516102fc91906110ad565b60405180910390f35b61031f600480360381019061031a9190610ee1565b610e03565b60405161032c919061114a565b60405180910390f35b606060028054610344906112ae565b80601f0160208091040260200160405190810160405280929190818152602001828054610370906112ae565b80156103bd5780601f10610392576101008083540402835291602001916103bd565b820191906000526020600020905b8154815290600101906020018083116103a057829003601f168201915b5050505050905090565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516104a7919061114a565b60405180910390a36001905092915050565b6000600454905090565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115610546576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053d906110ea565b60405180910390fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115610605576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fc9061110a565b60405180910390fd5b816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461065391906111f2565b92505081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106a8919061119c565b9250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461073b91906111f2565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161079f919061114a565b60405180910390a3600190509392505050565b60006020528060005260406000206000915090505481565b6000600560009054906101000a900460ff16905090565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086a9061112a565b60405180910390fd5b8160046000828254610885919061119c565b92505081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108da919061119c565b925050819055508273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161093f919061114a565b60405180910390a36001905092915050565b6001602052816000526040600020602052806000526040600020600091509150505481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600380546109f3906112ae565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1f906112ae565b8015610a6c5780601f10610a4157610100808354040283529160200191610a6c565b820191906000526020600020905b815481529060010190602001808311610a4f57829003601f168201915b5050505050905090565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aff9061112a565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115610b89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b80906110ea565b60405180910390fd5b8160046000828254610b9b91906111f2565b92505081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610bf091906111f2565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c55919061114a565b60405180910390a36001905092915050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115610cea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce1906110ea565b60405180910390fd5b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d3891906111f2565b92505081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d8d919061119c565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610df1919061114a565b60405180910390a36001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600081359050610e99816113cf565b92915050565b600081359050610eae816113e6565b92915050565b600060208284031215610eca57610ec961133e565b5b6000610ed884828501610e8a565b91505092915050565b60008060408385031215610ef857610ef761133e565b5b6000610f0685828601610e8a565b9250506020610f1785828601610e8a565b9150509250929050565b600080600060608486031215610f3a57610f3961133e565b5b6000610f4886828701610e8a565b9350506020610f5986828701610e8a565b9250506040610f6a86828701610e9f565b9150509250925092565b60008060408385031215610f8b57610f8a61133e565b5b6000610f9985828601610e8a565b9250506020610faa85828601610e9f565b9150509250929050565b610fbd81611226565b82525050565b610fcc81611238565b82525050565b6000610fdd82611180565b610fe7818561118b565b9350610ff781856020860161127b565b61100081611343565b840191505092915050565b600061101860118361118b565b915061102382611354565b602082019050919050565b600061103b60168361118b565b91506110468261137d565b602082019050919050565b600061105e600c8361118b565b9150611069826113a6565b602082019050919050565b61107d81611264565b82525050565b61108c8161126e565b82525050565b60006020820190506110a76000830184610fb4565b92915050565b60006020820190506110c26000830184610fc3565b92915050565b600060208201905081810360008301526110e28184610fd2565b905092915050565b600060208201905081810360008301526111038161100b565b9050919050565b600060208201905081810360008301526111238161102e565b9050919050565b6000602082019050818103600083015261114381611051565b9050919050565b600060208201905061115f6000830184611074565b92915050565b600060208201905061117a6000830184611083565b92915050565b600081519050919050565b600082825260208201905092915050565b60006111a782611264565b91506111b283611264565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156111e7576111e66112e0565b5b828201905092915050565b60006111fd82611264565b915061120883611264565b92508282101561121b5761121a6112e0565b5b828203905092915050565b600061123182611244565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b8381101561129957808201518184015260208101905061127e565b838111156112a8576000848401525b50505050565b600060028204905060018216806112c657607f821691505b602082108114156112da576112d961130f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f6e6f7420656e6f75676820746f6b656e21000000000000000000000000000000600082015250565b7f616d6f756e74206973206e6f7420616c6c6f7765642100000000000000000000600082015250565b7f6e6f7420616e206f776e65720000000000000000000000000000000000000000600082015250565b6113d881611226565b81146113e357600080fd5b50565b6113ef81611264565b81146113fa57600080fd5b5056fea264697066735822122046d86d75561cb24aee3cc88b3342da766a6cd9d4a76a0d101ad6628acb20ed9b64736f6c63430008070033";

type TokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Token__factory extends ContractFactory {
  constructor(...args: TokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Token";
  }

  deploy(
    _name: string,
    _symbol: string,
    _initialSupply: BigNumberish,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Token> {
    return super.deploy(
      _name,
      _symbol,
      _initialSupply,
      _decimals,
      overrides || {}
    ) as Promise<Token>;
  }
  getDeployTransaction(
    _name: string,
    _symbol: string,
    _initialSupply: BigNumberish,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _name,
      _symbol,
      _initialSupply,
      _decimals,
      overrides || {}
    );
  }
  attach(address: string): Token {
    return super.attach(address) as Token;
  }
  connect(signer: Signer): Token__factory {
    return super.connect(signer) as Token__factory;
  }
  static readonly contractName: "Token";
  public readonly contractName: "Token";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenInterface {
    return new utils.Interface(_abi) as TokenInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Token {
    return new Contract(address, _abi, signerOrProvider) as Token;
  }
}
